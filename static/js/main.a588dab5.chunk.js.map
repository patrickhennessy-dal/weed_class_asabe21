{"version":3,"sources":["components/Logo_CPU.svg","components/Header.js","components/Intro.js","components/Classifier.js","components/Acknowledgements.js","components/Cite.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","src","logo","alt","Intro","href","target","rel","Classifier","useState","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","resultsProb","setResultsProb","weedNames","imageRef","useRef","fileInputRef","loadModel","a","tf","console","log","identify","fromPixelsAsync","current","test_img","resizeBilinear","predict","prob","result","dataSync","useEffect","crossOrigin","ref","length","toFixed","type","accept","capture","onChange","e","files","url","URL","createObjectURL","onClick","click","Acknowledgements","Cite","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a588dab5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo_CPU.34e63f65.svg\";","import logo from './Logo_CPU.svg'\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n        <header className = 'header'>\r\n            <h1 className='centreColumn'><img className = 'logoCPU' src = {logo} alt='Logo'/>CNN Weed Classifier</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Intro = () => {\r\n    return (\r\n        <div className='intro text centreColumn'>\r\n            <p>This is an application for classifying weeds in wild blueberry fields using the MobileNet Convolutional Neural Network. The currently supported weeds are hair fescue, sheep sorrel, hawkweed, goldenrod, and bunchberry. This applicaton was presented at ASABE AIM 2021 with a <a href='https://www.asabemeetings.org/' target='_blank' rel='noopener noreferrer'>corresponding paper</a> in the conference proceedings.</p>\r\n            <p>To use the application, capture an image of the weed from directly above from a height of around 1 metre. Alternatively, download some <a href='https://www.dropbox.com/sh/tk734ttl2k6yw4n/AAAoJ4cJfgmjSatJYAh-JhYla?dl=0' target='_blank' rel='noopener noreferrer'>sample images</a>. Then, upload the image and let the deep learning algorithm do the work!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Intro\r\n","import React from 'react'\r\nimport { useState, useEffect, useRef } from 'react'\r\n//import * as mobilenet from \"@tensorflow-models/mobilenet\"\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nconst Classifier = () => {\r\n    const[isModelLoading, setIsModelLoading] = useState(false)\r\n    const[model, setModel] = useState(null)\r\n    const[imageURL, setImageURL] = useState(null);\r\n    const[results, setResults] = useState([])\r\n    const[resultsProb, setResultsProb] = useState([])\r\n    const weedNames = ['Goldenrod', 'Hawkweed', 'Bunchberry', 'Sheep Sorrel', 'No Weeds', 'Hair Fescue']\r\n\r\n    const imageRef = useRef()\r\n    const fileInputRef = useRef()\r\n\r\n    const loadModel = async () => {\r\n        setIsModelLoading(true)\r\n        try {\r\n        const model = await tf.loadLayersModel('https://cdn.jsdelivr.net/gh/patrickhennessy-dal/weed_class_asabe21/src/assets/modelMN/model.json')\r\n        setModel(model)\r\n        setIsModelLoading(false)\r\n\r\n        } catch(error) {\r\n        console.log(error)\r\n        setIsModelLoading(false)\r\n        }\r\n    }\r\n\r\n    const uploadImage = e => {\r\n        const { files } = e.target\r\n        if (files.length > 0) {\r\n            const url = URL.createObjectURL(files[0])\r\n            setImageURL(url)\r\n        } else {\r\n            setImageURL(null)\r\n        }\r\n    }\r\n\r\n    const identify = async () => {\r\n        let test_img = await tf.browser.fromPixelsAsync(imageRef.current)\r\n        test_img = tf.expandDims(test_img,0)\r\n        test_img = tf.image.resizeBilinear(test_img, [224,224])\r\n        const prob = await model.predict(test_img)\r\n        const result = tf.argMax(prob,1)\r\n        setResults(weedNames[result.dataSync()[0]])\r\n        setResultsProb(prob.dataSync()[result.dataSync()[0]])\r\n    }\r\n\r\n    const triggerUpload = () => {\r\n        fileInputRef.current.click()\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadModel()\r\n    }, [])\r\n\r\n    if (isModelLoading) {\r\n        return <h2 className='centreColumn'>Loading...</h2>\r\n    }\r\n\r\n    //console.log(results)\r\n\r\n    \r\n    return (\r\n        <div className='classifier'>\r\n            <div className='mainWrapper centreColumn'>\r\n                <div className='mainContent'>\r\n                    <div className='imageHolder'>\r\n                        {imageURL && <img src={imageURL} className='image' alt='Upload Preview' crossOrigin='anonymous' ref={imageRef}/>}\r\n                    </div>\r\n                    {results.length > 0 && <div className='resultsHolder text'>\r\n                          <div className='result' key={results.className}>\r\n                            <span className='name'><p>Result: {results} </p></span>\r\n                            <span className='confidence'>Confidence level: {(resultsProb * 100).toFixed(2)} %</span>\r\n                          </div>\r\n                    </div>}  \r\n                </div>\r\n                <div className='inputHolder'>\r\n                <input\r\n                  type='file'\r\n                  accept='image/*'\r\n                  capture='camera'\r\n                  className='uploadInput'\r\n                  onChange={uploadImage}\r\n                  ref={fileInputRef}\r\n                />\r\n                <div className='btnHolder'>\r\n                    <button className='ctrlBtn' onClick={triggerUpload}>Upload Image</button>\r\n                    {imageURL && <button className='ctrlBtn' onClick={identify}>Identify Image</button>}\r\n                </div>\r\n            </div>\r\n            {/*<div className='inputHolder'>\r\n                <input\r\n                  type='file'\r\n                  accept='image/*'\r\n                  capture='camera'\r\n                  className='uploadInput'\r\n                  onChange={uploadImage}\r\n                  ref={fileInputRef}\r\n                />\r\n                <button className='ctrlBtn' onClick={triggerUpload}>Upload Image</button>\r\n            </div>*/}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Classifier\r\n","const Acknowledgements = () => {\r\n    return (\r\n        <div className='text centreColumn'>\r\n            <h2>Acknowledgements</h2>\r\n            <p>This work was supported by Mitacs through the Mitacs Accelerate Program (IT23150), in partnership with the Wild Blueberry Producers Association of Nova Scotia. Additional funding for this research was provided by Natural Sciences and Engineering Research Council of Canada Discovery Grants Program (RGPIN-06295-2019), Doug Bragg Enterprises, Ltd, and New Brunswick Canadian Agricultural Partnership (CAP). The authors would like to thank the wild blueberry growers in Nova Scotia for use of their fields during image collection. Also, the authors acknowledge the efforts of the mechanized systems and precision agriculture research teams at Dalhousie University’s Faculty of Agriculture.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Acknowledgements\r\n","import React from 'react'\r\n\r\nconst Cite = () => {\r\n    return (\r\n        <div className = 'cite text centreColumn'>\r\n            <h2>Cite</h2>\r\n            <p>If you wish to use this work, please cite our <a href='https://www.asabemeetings.org/' target='_blank' rel='noopener noreferrer'>paper</a> in the ASABE AIM 2021 conference proceedings:</p>\r\n            {/*<pre><code className='citeCode'>{`\r\n                const citation = () => {\r\n                    title =     'Convolutional Neural Network Web Application for Aiding Field Management in Wild Blueberry';\r\n                    authors =   ['Patrick J. Hennessy', 'Travis J. Esau', 'Arnold W. Schumann', 'Aitazaz A. Farooque', 'Scott N. White', 'Qamar U. Zaman'];\r\n                    year =      2021;\r\n                    procTitle = '2021 ASABE Annual International Meeting';\r\n                    procCity =  'Virtual';\r\n                    doi =       '10.13031/aim.2100661';\r\n                };    \r\n            `}</code></pre>*/}\r\n            <pre className='citeCode'>\r\n                <span>\r\n{`const citation = () => {\r\n    title       = 'Convolutional Neural Network Web Application for Aiding Field Management in Wild Blueberry';\r\n    authors     = ['Patrick J. Hennessy', 'Travis J. Esau', 'Arnold W. Schumann', 'Aitazaz A. Farooque', 'Scott N. White', 'Qamar U. Zaman'];\r\n    year        = 2021;\r\n    procTitle   = '2021 ASABE Annual International Meeting';\r\n    procCity    = 'Virtual';\r\n    doi         = '10.13031/aim.2100661';\r\n};`}\r\n                </span>    \r\n            </pre>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cite\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='footer'>\r\n            <p className='centreColumn'>&#169; 2021 Patrick J. Hennessy, Dalhousie University, and The Wild Blueberry Producers Association of Nova Scotia</p>\r\n            <p className='centreColumn'><a className='contactLink' href='mailto:Patrick.Hennessy@Dal.ca'>Contact</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import Header from './components/Header'\nimport Intro from './components/Intro'\nimport Classifier from './components/Classifier'\n//import Management from './components/Management'\nimport Acknowledgements from './components/Acknowledgements'\nimport Cite from './components/Cite'\n//import References from './components/References'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Intro />\n      <Classifier />\n      {/*<Management />*/}\n      <Acknowledgements />\n      <Cite />\n      {/*<References />*/}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}