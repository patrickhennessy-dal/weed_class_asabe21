{"version":3,"sources":["components/Logo_CPU.svg","components/Header.js","components/Intro.js","components/Classifier.js","components/Acknowledgements.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","src","logo","alt","Intro","href","Classifier","useState","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","resultsProb","setResultsProb","weedNames","imageRef","useRef","fileInputRef","loadModel","a","tf","console","log","identify","fromPixelsAsync","current","test_img","resizeBilinear","predict","prob","result","dataSync","useEffect","crossOrigin","ref","length","toFixed","onClick","type","accept","capture","onChange","e","files","target","url","URL","createObjectURL","click","Acknowledgements","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a9bc7e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo_CPU.34e63f65.svg\";","import PropTypes from 'prop-types' \r\nimport logo from './Logo_CPU.svg'\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n        <header className = 'header'>\r\n            <h1><img className = 'logoCPU' src = {logo} alt='Logo'/>CNN Weed Classifier</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Intro = () => {\r\n    return (\r\n        <div className='intro text'>\r\n            <p>This is an application for classifying weeds in wild blueberry fields. The currently supported weeds are hair fescue, sheep sorrel, hawkweed, goldenrod, and bunchberry. This applicaton was presented at ASABE AIM 2021 with a <a href=\"https://www.asabemeetings.org/\">corresponding paper</a> in the conference proceedings.</p>\r\n            <p>To use the application, capture an image of the weed from directly above from a height of around 1 metre. Alternatively, download sample images below. Then, upload the image and let the deep learning algorithm do the work!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Intro\r\n","import React from 'react'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport * as mobilenet from \"@tensorflow-models/mobilenet\"\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nconst Classifier = () => {\r\n    const[isModelLoading, setIsModelLoading] = useState(false)\r\n    const[model, setModel] = useState(null)\r\n    const[imageURL, setImageURL] = useState(null);\r\n    const[results, setResults] = useState([])\r\n    const[resultsProb, setResultsProb] = useState([])\r\n    const weedNames = ['Goldenrod', 'Hawkweed', 'Bunchberry', 'Sheep Sorrel', 'No Weeds', 'Hair Fescue']\r\n\r\n    const imageRef = useRef()\r\n    const fileInputRef = useRef()\r\n\r\n    const loadModel = async () => {\r\n        setIsModelLoading(true)\r\n        try {\r\n        const model = await tf.loadLayersModel('https://cdn.jsdelivr.net/gh/patrickhennessy-dal/weed_class_asabe21/src/assets/modelMN/model.json')\r\n        setModel(model)\r\n        setIsModelLoading(false)\r\n\r\n        } catch(error) {\r\n        console.log(error)\r\n        setIsModelLoading(false)\r\n        }\r\n    }\r\n\r\n    const uploadImage = e => {\r\n        const { files } = e.target\r\n        if (files.length > 0) {\r\n            const url = URL.createObjectURL(files[0])\r\n            setImageURL(url)\r\n        } else {\r\n            setImageURL(null)\r\n        }\r\n    }\r\n\r\n    const identify = async () => {\r\n        let test_img = await tf.browser.fromPixelsAsync(imageRef.current)\r\n        test_img = tf.expandDims(test_img,0)\r\n        test_img = tf.image.resizeBilinear(test_img, [224,224])\r\n        const prob = await model.predict(test_img)\r\n        console.log('prob ' + prob)\r\n        const result = tf.argMax(prob,1)\r\n        console.log(prob.dataSync()[result.dataSync()[0]])\r\n        console.log('result ' + result)\r\n        console.log(result.dataSync()[0])\r\n        console.log(weedNames[result.dataSync()[0]]) \r\n        setResults(weedNames[result.dataSync()[0]])\r\n        setResultsProb(prob.dataSync()[result.dataSync()[0]])\r\n    }\r\n\r\n    const triggerUpload = () => {\r\n        fileInputRef.current.click()\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadModel()\r\n    }, [])\r\n\r\n    if (isModelLoading) {\r\n        return <h2>Model Loading...</h2>\r\n    }\r\n\r\n    //console.log(results)\r\n\r\n    \r\n    return (\r\n        <div className='classifier'>\r\n            {/*<div className='inputHolder'>\r\n                <input\r\n                  type='file'\r\n                  accept='image/*'\r\n                  capture='camera'\r\n                  className='uploadInput'\r\n                  onChange={uploadImage}\r\n                  ref={fileInputRef}\r\n                />\r\n                <button className='ctrlBtn' onClick={triggerUpload}>Upload Image</button>\r\n    </div>*/}\r\n            <div className='mainWrapper'>\r\n                <div className='mainContent'>\r\n                    <div className='imageHolder'>\r\n                        {imageURL && <img src={imageURL} className='image' alt='Upload Preview' crossOrigin='anonymous' ref={imageRef}/>}\r\n                    </div>\r\n                    {results.length > 0 && <div className='resultsHolder'>\r\n                          <div className='result' key={results.className}>\r\n                            <span className='name'><p>Result: {results} </p></span>\r\n                            <span className='confidence'>Confidence level: {(resultsProb * 100).toFixed(2)} %</span>\r\n                          </div>\r\n                    </div>}  \r\n                </div>\r\n                {imageURL && <button className='ctrlBtn' onClick={identify}>Identify Image</button>}\r\n            </div>\r\n            <div className='inputHolder'>\r\n                <input\r\n                  type='file'\r\n                  accept='image/*'\r\n                  capture='camera'\r\n                  className='uploadInput'\r\n                  onChange={uploadImage}\r\n                  ref={fileInputRef}\r\n                />\r\n                <button className='ctrlBtn' onClick={triggerUpload}>Upload Image</button>\r\n    </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Classifier\r\n","const Acknowledgements = () => {\r\n    return (\r\n        <div className='text'>\r\n            <h2>Acknowledgements</h2>\r\n            <p>This work was supported by Mitacs through the Mitacs Accelerate Program. Additional funding for this research was provided by Natural Sciences and Engineering Research Council of Canada Discovery Grants Program (RGPIN-06295-2019), Doug Bragg Enterprises, Ltd, and New Brunswick Canadian Agricultural Partnership (CAP). The authors would like to thank the wild blueberry growers in Nova Scotia for use of their fields during image collection. Also, the authors acknowledge the efforts of the mechanized systems and precision agriculture research teams at Dalhousie Universityâ€™s Faculty of Agriculture.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Acknowledgements\r\n","import Header from './components/Header'\nimport Intro from './components/Intro'\n//import Samples from './components/Samples'\nimport Classifier from './components/Classifier'\n//import Management from './components/Management'\nimport Acknowledgements from './components/Acknowledgements'\n//import Cite from './components/Cite'\n//import References from './components/References'\n//import Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Intro />\n      {/*<Samples />*/}\n      <Classifier />\n      {/*<Management />*/}\n      <Acknowledgements />\n      {/*<Cite />*/}\n      {/*<References />*/}\n      {/*<Footer />*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}